<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.zzuzl.dao.ActivityDao">

    <sql id="_listWhere">
        <where>
            and a.valid='1'
            <if test="schoolNum != null and schoolNum != ''">
                and a.schoolNum=#{schoolNum}
            </if>
            <if test="year != null">
                and p.`year`=#{year}
            </if>
            <if test="majorCode != null and majorCode != ''">
                and p.majorCode = #{majorCode}
            </if>
            <if test="itemId != null">
                and a.itemId=#{itemId}
            </if>
        </where>
    </sql>

    <select id="listActivities" resultType="cn.zzuzl.model.Activity">
        select
        a.id,
        a.itemId as "item.id",
        a.title,
        a.score,
        a.`desc`,
        a.schoolNum as "student.schoolNum",
        a.operator as "operator.schoolNum",
        s.name as "operator.name",
        a.createTime,
        a.updateTime,
        i.title as "item.title",
        p.id as "item.project.id",
        p.title as "item.project.title"
        from
        activity a
        left join item i on a.itemId=i.id
        left join project p on i.projectId=p.id
        left join student s on s.schoolNum=a.operator
        <include refid="_listWhere"/>
        order by a.updateTime
    </select>

    <insert id="insert" parameterType="cn.zzuzl.model.Activity" keyProperty="id" useGeneratedKeys="true">
        insert ignore into activity(
        itemId,
        title,
        score,
        `desc`,
        schoolNum,
        operator,
        createTime,
        updateTime
        ) values(
        #{item.id},
        #{title},
        #{score},
        #{desc},
        #{student.schoolNum},
        #{operator.schoolNum},
        now(),
        now()
        )
    </insert>

    <insert id="batchInsert">
        insert into activity(
        id,
        itemId,
        title,
        score,
        `desc`,
        schoolNum,
        operator,
        createTime,
        updateTime
        ) values
        <foreach collection="activityList" item="item" open="" close="" separator=",">
            (
            #{item.id},
            #{item.item.id},
            #{item.title},
            #{item.score},
            #{item.desc},
            #{item.student.schoolNum},
            #{operator.schoolNum},
            now(),
            now()
            )
        </foreach>
        on duplicate key update
        itemId=VALUES (itemId),
        title=VALUES (title),
        score=VALUES (score),
        operator=VALUES (operator),
        `desc`=VALUES (`desc`),
        updateTime=now()
    </insert>

    <update id="updateInvalid">
        update activity
        set valid='0'
        where schoolNum=#{schoolNum}
        and itemId in
        <foreach collection="itemIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
        and id not in
        <foreach collection="ids" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>
</mapper>