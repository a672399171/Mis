<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.zzuzl.dao.StudentDao">

    <sql id="_listWhere">
        <where>
            and valid='1'
            <if test="schoolNum != null and schoolNum != ''">
                and schoolNum=#{schoolNum}
            </if>
            <if test="name != null and name != ''">
                and `name`=#{name}
            </if>
            <if test="majorCode != null and majorCode != ''">
                and classCode like #{majorCode}"%"
            </if>
            <if test="classCode != null and classCode != ''">
                and classCode=#{classCode}
            </if>
            <if test="grade != null and grade != ''">
                and grade=#{grade}
            </if>
        </where>
    </sql>

    <select id="searchBySchoolNum" resultType="cn.zzuzl.model.Student">
        select
        schoolNum,
        grade,
        `name`,
        sex,
        classCode,
        birthday,
        nation,
        politicalStatus,
        idNo,
        accountNo,
        originAddress,
        homeAddress,
        entranceDate,
        schoolYear,
        residence,
        phone,
        qq,
        email,
        parentPhone,
        dormNo,
        direction
        from student
        where schoolNum=#{schoolNum}
    </select>

    <insert id="insertStudent" parameterType="cn.zzuzl.model.Student">
        insert ignore into student(
        schoolNum,
        grade,
        `name`,
        sex,
        classCode,
        createTime,
        updateTime
        ) values(
        #{schoolNum},
        #{grade},
        #{name},
        #{sex},
        #{classCode},
        now(),
        now()
        )
    </insert>

    <select id="searchStudent" resultType="cn.zzuzl.model.Student">
        select
        schoolNum,
        grade,
        `name`,
        sex,
        classCode
        from student
        <include refid="_listWhere"/>
        <if test="sortField != null and sortField != '' and sortDir != null and sortDir != ''">
            order by #{sortField} #{sortDir}
        </if>
        <if test="perPage != null and perPage &gt; 0">
            limit #{start},#{perPage}
        </if>
    </select>

    <select id="getStudentCount" resultType="int">
        select
        count(1) as num
        from student
        <include refid="_listWhere"/>
    </select>

    <update id="updateStudent">
        update student set
        birthday=#{birthday},
        nation=#{nation},
        politicalStatus=#{politicalStatus},
        idNo=#{idNo},
        accountNo=#{accountNo},
        originAddress=#{originAddress},
        homeAddress=#{homeAddress},
        entranceDate=#{entranceDate},
        schoolYear=#{schoolYear},
        residence=#{residence},
        phone=#{phone},
        qq=#{qq},
        email=#{email},
        parentPhone=#{parentPhone},
        dormNo=#{dormNo},
        direction=#{direction},
        updateTime=now()
        where schoolNum=#{schoolNum}
    </update>

    <update id="updateInvalid">
        update student
        set valid='0'
        where schoolNum=#{schoolNum}
    </update>

    <insert id="insertLoginRecord">
        insert ignore into loginRecord(
        schoolNum,
        loginTime,
        ip,
        location
        ) values (
        #{schoolNum},
        now(),
        #{ip},
        #{location}
        )
    </insert>

    <select id="searchLoginRecord" resultType="cn.zzuzl.dto.LoginRecordVO">
        select
        count(id) as `count`,
        DATE(loginTime) as loginDate
        from loginRecord
        where loginTime &lt;= now() and loginTime >= #{loginDate}
        group by date(loginTime),schoolNum
    </select>

    <select id="export" resultType="cn.zzuzl.model.Student">
        select
        schoolNum,
        grade,
        `name`,
        sex,
        classCode,
        birthday,
        nation,
        politicalStatus,
        idNo,
        accountNo,
        originAddress,
        homeAddress,
        entranceDate,
        schoolYear,
        residence,
        phone,
        qq,
        email,
        parentPhone,
        dormNo
        from student
        <include refid="_listWhere"/>
    </select>

    <select id="searchOneGoHome" resultType="cn.zzuzl.model.GoHome">
        select
        id,
        schoolNum as "student.schoolNum",
        `year`,
        vacation,
        startDate,
        endDate,
        address,
        phone,
        `type`,
        operator as "operator.schoolNum",
        createTime,
        updateTime
        from goHome
        where schoolNum=#{schoolNum}
        and vacation=#{vacation}
        and `year`=#{year}
        order by createTime
        limit 1
    </select>

    <insert id="insertGoHome">
        insert into goHome(
        id,
        schoolNum,
        `year`,
        vacation,
        startDate,
        endDate,
        address,
        phone,
        `type`,
        operator,
        createTime,
        updateTime
        )values(
        #{id},#{student.schoolNum},#{year},#{vacation},#{startDate},#{endDate},
        #{address},#{phone},#{type},#{operator.schoolNum},now(),now()
        ) on duplicate key update
        startDate=values(startDate),
        endDate=values(endDate),
        address=values(address),
        phone=values(phone),
        `type`=values(`type`),
        operator=values(operator),
        updateTime=values(updateTime)
    </insert>

    <select id="searchGoHome" resultType="cn.zzuzl.model.GoHome">
        select
        g.id,
        g.schoolNum as "student.schoolNum",
        s.name as "student.name",
        g.`year`,
        g.vacation,
        g.startDate,
        g.endDate,
        g.address,
        g.phone,
        g.`type`,
        g.operator as "operator.schoolNum",
        g.createTime,
        g.updateTime
        from goHome g left join student s on g.schoolNum=s.schoolNum
        where s.classCode=#{classCode}
        and g.vacation=#{vacation}
        and g.`year`=#{year}
        order by g.schoolNum
    </select>

    <select id="allAuthority" resultType="cn.zzuzl.model.Authority">
        select title,authCode from authority where valid="1"
    </select>

    <select id="blurSearchStudent" resultType="cn.zzuzl.model.Student">
        select
        schoolNum,
        `name`
        from student
        where schoolNum like #{keyword}"%"
        or name like "%"#{keyword}"%"
        order by schoolNum
        limit 20
    </select>

    <select id="getResources" resultType="cn.zzuzl.model.Authority">
        select
        sa.id,
        au.title,
        au.authCode
        from
        stu_auth sa,authority au
        where sa.authCode=au.authCode
        and sa.schoolNum=#{schoolNum}
        and au.valid="1"
    </select>

    <delete id="deleteAuth">
        delete from stu_auth where id=#{id}
    </delete>

    <select id="searchAuth" resultType="cn.zzuzl.model.Authority">
        select
        sa.id,
        au.title,
        au.authCode
        from
        stu_auth sa,authority au
        where sa.authCode=au.authCode
        and sa.schoolNum=#{schoolNum}
        and sa.authCode=#{authCode}
        and au.valid="1"
        limit 1
    </select>

    <insert id="addAuth">
        insert into stu_auth(
        schoolNum,
        authCode,
        createTime,
        updateTime
        ) values (
        #{schoolNum},
        #{authCode},
        now(),
        now()
        )
    </insert>
</mapper>